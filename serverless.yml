service: serverless-wiki-crawler 

provider:
  name: aws
  runtime: python3.7
  memorySize: 128
  logRetentionInDays: 30
  stage: ${opt:stage, 'dev'}
  region: eu-west-1
  environment:
    S3_CONTENT_TYPE: application/json
  # you can add statements to the Lambda function's IAM Role here
  iamRoleStatements:
    - Effect: "Allow"
      Action:
        - "s3:*"
      Resource: 
        - "arn:aws:s3:::${self:custom.s3.buckets.wikiBucketName}/*"
    - Effect: "Allow"
      Action:
        - "dynamodb:*"
      Resource: 
        - "*" # this should be more limited

plugins:
   - serverless-python-requirements

custom:
  pythonRequirements:
    dockerizePip: false # use true or non-linux if you required compiled python packages, e.g. numpy
  s3:
    bucketPrefix: ${self:service}-${self:provider.stage}
    buckets:
      wikiBucketName: ${self:custom.s3.bucketPrefix}-wiki-crawler 
  dynamoDB:
    wikiTableName: ServerlessWikiCrawlerDev

# here the functions go
functions:
  wiki:
    handler: handler.wiki_crawler
    environment:
      S3_BUCKET_NAME: ${self:custom.s3.buckets.wikiBucketName}
      DYBAMODB_TABLE_NAME: ${self:custom.dynamoDB.wikiTableName}
    events:
      - schedule: 
          rate: rate(1 minute)
          enabled: false
          input:
            lang: pl
        
# you can add CloudFormation resource templates here
resources:
 Resources:
    # S3 bucket
    WikiBucket:
      Type: AWS::S3::Bucket
      Properties:
        BucketName: ${self:custom.s3.buckets.wikiBucketName}
    # DynamoDB table
    WikiTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: ${self:custom.dynamoDB.wikiTableName}
        AttributeDefinitions:
          - AttributeName: url
            AttributeType: S
        KeySchema:
          - AttributeName: url
            KeyType: HASH
        ProvisionedThroughput:
          ReadCapacityUnits: 1
          WriteCapacityUnits: 1